class A {
    // 18 warnings
    // RELOP : '<' | '>' | '<=' | '>=' | '==' | '!=';
    private int relopWarning(){
        bool bool_;
        int int_;

        int_ = 0;
        bool_ = true;

        bool_ = int_ <  bool_;
        bool_ = int_ >  bool_;
        bool_ = int_ <= bool_;
        bool_ = int_ >= bool_;
        bool_ = int_ == bool_;
        bool_ = int_ != bool_;

        bool_ = bool_ <  int_;
        bool_ = bool_ >  int_;
        bool_ = bool_ <= int_;
        bool_ = bool_ >= int_;
        bool_ = bool_ == int_;
        bool_ = bool_ != int_;

        bool_ = bool_ <  bool_;
        bool_ = bool_ >  bool_;
        bool_ = bool_ <= bool_;
        bool_ = bool_ >= bool_;
        bool_ = bool_ == bool_;
        bool_ = bool_ != bool_;

        return 0;
    }

    // 3 warnings
    // MULOP : '*' | '/' | '%';
    private int mulopWarning(){
        int result;
        int a;
        bool b;

        result = a * a;
        result = a / b;
        result = a % b;

        return 0;
    }

    // 1 warnings
    // AND : '&&';
    private int andWarning(){
        bool result;
        bool a;
        int b;

        result = a && b;

        return 0;
    }

    // 1 warnings
    // OR : '||';
    private int orWarning(){
        bool result;
        bool a;
        int b;

        result = a || b;

        return 0;
    }

    // 2 warnings
    // ADDOP : '+' | '-';
    private int addopWarning(){
        int result;
        int a;
        bool b;

        result = a + b;
        result = a - b;

        return 0;
    }

    // 1 warnings
    // NOT : '!';
    private int notPass(){
        bool result;
        int a;

        result = !a;

        return 0;
    }
}
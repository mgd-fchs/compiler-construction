class Helper{

}

class Helper1{

}

class A {
    // 30 errors
    // RELOP : '<' | '>' | '<=' | '>=' | '==' | '!=';
    private int relopFail(){
        bool bool_;
        int int0;
        Helper helper0;
        string string0;
        int int1;
        int int2;

        int0 = 0;
        int1 = 1;
        int2 = 2;
        bool_ = true;

        bool_ = int0 <  helper0;
        bool_ = int0 >  helper0;
        bool_ = int0 <= helper0;
        bool_ = int0 >= helper0;
        bool_ = int0 == helper0;
        bool_ = int0 != helper0;

        bool_ = bool_ <  helper0;
        bool_ = bool_ >  helper0;
        bool_ = bool_ <= helper0;
        bool_ = bool_ >= helper0;
        bool_ = bool_ == helper0;
        bool_ = bool_ != helper0;

        bool_ = int0 <  string0;
        bool_ = int0 >  string0;
        bool_ = int0 <= string0;
        bool_ = int0 >= string0;
        bool_ = int0 == string0;
        bool_ = int0 != string0;

        bool_ = bool_ <  string0;
        bool_ = bool_ >  string0;
        bool_ = bool_ <= string0;
        bool_ = bool_ >= string0;
        bool_ = bool_ == string0;
        bool_ = bool_ != string0;

        bool_ = int0 <  nix;
        bool_ = int0 >  nix;
        bool_ = int0 <= nix;
        bool_ = int0 >= nix;
        bool_ = int0 == nix;
        bool_ = int0 != nix;

        return 0;
    }

    // 8 errors
    // RELOP for class type: '==' | '!=';
    private int relopClassTypeFail(){
        Helper a;
        Helper1 b;
        int c;
        string d;
        bool e;
        bool result;

        result = a == b;
        result = a != b;

        result = a == c;
        result = a != c;

        result = a == d;
        result = a != d;

        result = a == e;
        result = a != e;

        return 0;
    }

    // 9 errors
    // MULOP : '*' | '/' | '%';
    private int mulopErrors(){
        int result;
        int a;
        string string_;
        Helper helper_;

        result = a * string_;
        result = a / string_;
        result = a % string_;

        result = a * helper_;
        result = a / helper_;
        result = a % helper_;

        result = a * nix;
        result = a / nix;
        result = a % nix;

        return 0;
    }

    // 3 error
    // AND : '&&';
    private int andErrors(){
        bool result;
        bool a;
        Helper b;
        string c;

        result = a && b;
        result = a && c;
        result = a && nix;

        return 0;
    }

    // 3 error
    // OR : '||';
    private int orErrors(){
        bool result;
        bool a;
        Helper b;
        string c;


        result = a || b;
        result = a || c;
        result = a || nix;

        return 0;
    }

    // 6 errors
    // ADDOP : '+' | '-';
    private int addopError(){
        int result;
        int a;
        Helper b;
        string c;

        result = a + b;
        result = a - b;

        result = a + c;
        result = a - c;

        result = a + nix;
        result = a - nix;

        return 0;
    }

    // 3 errors
    // NOT : '!';
    private int notPass(){
        bool result;
        string a;
        Helper b;


        result = !a;
        result = !b;
        result = !nix;

        return 0;
    }
}
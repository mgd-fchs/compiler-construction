Framework tested with OpenJDK11 + gradle 7.4

Group17

Simon Gutschlhofer      (11819004)  simon.gutschlhofer@student.tugraz.at
Richard Heinz           (11814002)  richard.heinz@student.tugraz.at
Magdalena Hinterkörner  (11807636)  m.hinterkoerner@student.tugraz.at


Description of the Program:
---------------------------
- Implementation of a compiler for a simple object-oriented programming language called Jova.
- Use of a nested symbol table to track and store created classes, objects, and variables.
    - "src/main/java/at/tugraz/ist/cc/symbol_table"
- The visitor class exploits the ANTLR-generated parse tree to traverse the program for typechecking.
    - "src/main/java/at/tugraz/ist/cc/TypeCheckerJovaVisitorImpl.java"

-------------------
Remarks for task 1:
-------------------
General remarks:
----------------
- Additional testing:
    - Test case location: "src/test/resources/private/typechecking"
    - Test class: "src/test/java/at/tugraz/ist/cc/TypeCheckerPrivateTest.java"
    - Test cases are sorted by pass/fail/warning, as well as the feature they aim to test

Changes  made:
--------------
- Implemented Lexer, Parser, and Typechecker according to the assignment description.
- Implemented bonus task 1
- Added private test class

Known limitations:
------------------
-

Implemented BONUS tasks:
------------------------
1) Extend the type system to include float and char:
    - Supported coercion:
        char to string
        integer to float
    - Supported operands:
        char: ternary operator
        float: arithmetic operations (addop, mulop, relop), ternary operator, unary (addop only)
    - Test cases:
        Since all other functionalities are tested within the main test class ("java/at/tugraz/ist/cc/TypeCheckerPublicTest.java"),
        the bonus test cases only pertain to the added syntax and coercion rules:

        - Syntax tests: "java/at/tugraz/ist/cc/LexicalAndSyntaxPublicTest.java"
            - testBonusFail01(): Check that incorrect syntax for float is rejected
            - testBonusFail02(): Check that incorrect syntax for char is rejected

        - Type check tests: "java/at/tugraz/ist/cc/TypeCheckerBonusTest.java"
            - testBonusPass01(): Check simple assign and return cases
            - testBonusPass02(): Define and retrieve class members of type float
            - testBonusPass03(): Define and retrieve class members of type char
            - testBonusPass04(): Check correct operators on float
            - testBonusPass05(): Check correct operators on char
            - testBonusFail01(): Check incompatible operators on float fail
            - testBonusFail02(): Check incompatible operators on char fail
            - testBonusCoercion01(): Check coercion warnings for float
            - testBonusCoercion02(): Check coercion warnings for char

-------------------
Remarks for task 2:
-------------------
General remarks:
----------------
- Additional testing:
    - Test case location: "src/test/resources/public/codegeneration/pass"
    - Test class: "src/test/java/at/tugraz/ist/cc/CodeGeneratorPrivateTest.java"
    - Short description of each testcase can be found in a comment in each Test-Function

Changes  made:
--------------
- Implemented CodeGenerator according to the assignment description.
- Implemented instruction-classes and a structure to manage them accordingly.
- Added private test class

Known limitations:
------------------
...

Implemented BONUS tasks:
------------------------
...

Percentage of participation:
----------------------------
1/3:  Simon Gutschlhofer
1/3:  Richard Heinz
1/3:  Magdalena Hinterkörner

-------------------
Remarks for task 3:
-------------------
General remarks:
----------------
- Additional testing:
    - Test case location: "src/test/resources/private/code_optimization/input"
    - Test class: "src/test/java/at/tugraz/ist/cc/CodeOptimizerPrivateTest.java"

Changes  made:
--------------
- Implemented Code Optimization according to the assignment description.
- Added private test class

Known limitations:
------------------

Implemented BONUS tasks:
------------------------
- "Add optimizations for all Jova operators and data types"
- Optimizations of the main assignment were extended to:
    - relational operations
    - logical operations (binary/unary)

- Supported data types:
    - Constant folding: int, bool
    - Dead code elimination: str, int, bool
    - Constants propagation: int, bool
    - Copy propagation: str, int, bool

- Limitations:
    - Not implemented for ternary operator.
    - Not implemented for bonus data types (float, char) as these were not handled in Assignment 2.
    - Type coercion is not supported.

- Test cases:
    - Test cases are located in the main test input folder for this assignment:
            "src/test/resources/private/code_optimization/input".
    - Jasmin files for bonus test cases are generated by specifying them in the main test class and running
            "CodeOptimizerPrivateTest.buildBonusTests()".
    - Bonus test cases were created for constant folding and constant/copy propagation, since dead code elimination and
            peephole optimization are independent of datatype and therefore tested in the main test class.
    - Test cases:
        - constant_folding_bonus_01.jova: Check constant folding in logical operations
        - constant_folding_bonus_02.jova: Check constant folding in relational operations
        - constant_propagation_bonus_01.jova: Check copy propagation for string
        - constant_propagation_bonus_02.jova: Check constant propagation for bool
        - constant_propagation_bonus_03.jova: Check copy propagation for bool